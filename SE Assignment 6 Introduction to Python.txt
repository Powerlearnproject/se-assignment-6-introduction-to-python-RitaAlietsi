1. Python Basics:  What is Python, and what are some of its key features that make it popular among developers? Provide examples of use cases where Python is particularly effective.
Python is a popular programming language known for being easy to read and write and can handle different programming styles like procedural, object-oriented, and functional programming.
Key Features:
Readability: Easy-to-understand syntax.
Versatility: Can be used for web development, data analysis, machine learning, automation, and more.
Extensive Libraries: Comes with many built-in libraries and third-party packages.
Cross-Platform: Works on Windows, macOS, and Linux.
Community Support: Large, active community for support and development.

Uses
Web Development: Using frameworks like Django and Flask.
Data Science and Machine Learning: Using libraries like Pandas, NumPy, and TensorFlow.
Automation: Using tools like Selenium.
Software Development: Building various applications and tools.




2. Installing Python: Describe the steps to install Python on your operating system (Windows, macOS, or Linux). Include how to verify the installation and set up a virtual environment.
Steps to Install Python (Windows):
Download the installer from the Python website.
Run the installer and check the "Add Python to PATH" option.
Follow the installation steps.

Verifying Installation:
Open a terminal or command prompt.
Type python --version or python3 --version.

Setting Up a Virtual Environment:

Install virtualenv (if not installed): pip install virtualenv.
Create a virtual environment: virtualenv venv.

Activate the virtual environment:
Source environment name/Scripts/activate




3. Python Syntax and Semantics: Write a simple Python program that prints "Hello, World!" to the console. Explain the basic syntax elements used in the program.
print("Hello, World!")

Explanation:
print(): Function that outputs text to the console.
"Hello, World!": Text to be displayed, enclosed in double quotes.




4. Data Types and Variables: List and describe the basic data types in Python. Write a short script that demonstrates how to create and use variables of different data types.
Basic Data Types in Python
int: Whole numbers, e.g., 42.
float: Decimal numbers, e.g., 3.14.
str: Text, e.g., "Hello".
bool: True or False values.
list: Ordered collection of items, e.g., [1, 2, 3].
dict: Key-value pairs, e.g., {"key": "value"}.

Example:
# Integers
a = 10
print(a)

# Floats
b = 3.14
print(b)

# Strings
c = "Hello"
print(c)

# Booleans
d = True
print(d)

# Lists
e = [1, 2, 3]
print(e)

# Dictionaries
f = {"name": "Alice", "age": 25}
print(f)





5. Control Structures:  Explain the use of conditional statements and loops in Python. Provide examples of an `if-else` statement and a `for` loop.
Conditional Statements and Loops:
if-else Statement:
x = 10
if x > 5:
    print("x is greater than 5")
else:
    print("x is 5 or less")

for Loop:
for i in range(5):
    print(i)




6. Functions in Python:  What are functions in Python, and why are they useful? Write a Python function that takes two arguments and returns their sum. Include an example of how to call this function.
Functions are blocks of code that perform specific tasks. They help organize code and make it reusable.
Example Function:
def add(a, b):
    return a + b
# Calling the function
result = add(3, 4)
print(result)  
# Output: 7





7. Lists and Dictionaries: Describe the differences between lists and dictionaries in Python. Write a script that creates a list of numbers and a dictionary with some key-value pairs, then demonstrates basic operations on both.
List: Ordered collection accessed by index.
Dictionary: Unordered collection accessed by keys.

Example Script:
# List of numbers
numbers = [1, 2, 3, 4, 5]
numbers.append(6)
print(numbers)  # Output: [1, 2, 3, 4, 5, 6]

# Dictionary with key-value pairs
person = {"name": "Alice", "age": 25}
person["city"] = "New York"
print(person)  # Output: {'name': 'Alice', 'age': 25, 'city': 'New York'}




8. Exception Handling: What is exception handling in Python? Provide an example of how to use `try`, `except`, and `finally` blocks to handle errors in a Python script.
It is how Python deals with errors. try, except, and finally blocks are used to manage errors.
Example:
try:
    result = 10 / 0
except ZeroDivisionError:
    print("Cannot divide by zero")
finally:
    print("Execution complete")




9. Modules and Packages: Explain the concepts of modules and packages in Python. How can you import and use a module in your script? Provide an example using the `math` module.
Module: Contains Python code (functions, variables).
Package: Collection of modules in a directory with an __init__.py file.

Importing and Using a Module:
import math
result = math.sqrt(16)
print(result)  # Output: 4.0





10. File I/O: How do you read from and write to files in Python? Write a script that reads the content of a file and prints it to the console, and another script that writes a list of strings to a file.
Read a File:
with open('example.txt', 'r') as file:
    content = file.read()
    print(content)

Write to a File:
lines = ["First line", "Second line", "Third line"]
with open('output.txt', 'w') as file:
    for line in lines:
        file.write(line + "\n")
